#!/bin/env bash

set -e

key_prefix="koa_knex_port_"

if ! [ "$MEMCACHE_ADDR" ]; then MEMCACHE_ADDR="127.0.0.1"; fi
if ! [ "$MEMCACHE_PORT" ]; then MEMCACHE_PORT="11211"; fi
# wrapper for memcached usage in the command line
# reduced and tweaked extract of https://gist.github.com/goodevilgenius/11375877
mc_sendmsg() { echo -e "$*\r\nquit\n" | nc $MEMCACHE_ADDR $MEMCACHE_PORT; }
mc_get() { mc_sendmsg "get $1" | awk "/^VALUE $1/{a=1;next}/^END/{a=0}a" ;}
mc_doset() {
	command="$1"
	shift
	key="$1"
	shift
	exptime="$1"
	shift
	val="$*"
	let bytes=$(echo -n "$val"|wc -c)
	mc_sendmsg "$command $key 0 $exptime $bytes\r\n$val"
}
mc_set() { mc_doset set "$@";}
mc_delete() { mc_sendmsg delete "$*";}

get_available_port () {
  read lowest highest < /proc/sys/net/ipv4/ip_local_port_range
  local taken_ports=( $(ss -lntu | tail -n +2 | awk '{ m=match($5, /([0-9]+)$/, ms); if (m) { print ms[1] } }') )

  for port in $(seq $lowest $highest); do
    for taken_i in $(seq 0 ${#taken_ports[@]}); do
      if [ "${taken_ports[$taken_i]}" = "$port" ]; then
        continue 2
      fi
    done

    local key="$key_prefix$port"
    if [ "$(mc_get "$key")" ]; then
      continue
    fi

    mc_set "$key" 0 1

    echo "$port"
    break
  done
}

free_port() {
  mc_delete "$key_prefix$port"
}

print_usage_and_exit() {
  echo -e "Commands:\nport_manager free [port]\nport_manager acquire\nport_manager help"
  exit $1
}

if [ "${1:-}" ]; then
  echo "Missing argument"
  print_usage_and_exit 1
fi

if [ "$1" = "help" ]; then
  print_usage_and_exit
elif [ "$1" = "acquire" ]; then
  get_available_port
elif [ "$1" = "free" ]; then
  if ! [ "${2:-}" ]; then
    echo "Missing argument"
    print_usage_and_exit 1
  fi

  free_port "$2"
else
  echo "Unknown option '$1'"
  exit 1
fi
